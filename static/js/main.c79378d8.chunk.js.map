{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","file","setFile","xmlJson","setXmlJson","useEffect","reader","FileReader","readAsText","onload","parseString","result","err","data","System","console","log","onerror","error","displayContent","String","Array","isArray","Object","keys","map","key","toString","className","htmlFor","id","type","onChange","e","target","files","Table","striped","bordered","hover","Application_Name","Application_Version","Computer_Name","Scan_Date","Hardware_Inventory","ME_Firmware_Information","System_Status","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAyFeA,MArFf,WAAgB,IAAD,EACWC,mBAAS,MADpB,mBACNC,EADM,KACAC,EADA,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAGbC,qBAAU,WACR,GAAIJ,EAAM,CACR,IAAMK,EAAS,IAAIC,WACnBD,EAAOE,WAAWP,EAAM,SACxBK,EAAOG,OAAS,WACdC,sBAAYJ,EAAOK,QAAQ,SAACC,EAAKD,GAAY,IAC3BE,EAASF,EAAjBG,OACRC,QAAQC,IAAIH,GACZT,EAAWS,OAGfP,EAAOW,QAAU,WACfF,QAAQG,MAAR,+BAAsCZ,EAAOY,YAGhD,CAACjB,IAEJ,IAAMkB,EAAiB,SAAAN,GACrB,MAAoB,kBAATA,GAAqBA,aAAgBO,OACvCP,EAELQ,MAAMC,QAAQT,GACO,kBAAZA,EAAK,IAAmBA,EAAK,aAAcU,OAC7CA,OAAOC,KAAKX,EAAK,IAAIY,KAAI,SAAAC,GAC9B,OACE,2BACE,gCAASA,EAAT,SACCb,EAAK,GAAGa,OAKVb,EAAK,GAAGc,gBAXjB,GAeF,OACE,yBAAKC,UAAU,mBACb,6CACA,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,cAAf,sBACA,2BACEC,GAAG,aACHF,UAAU,oBACVG,KAAK,OACLC,SAAU,SAAAC,GAAC,OAAI/B,EAAQ+B,EAAEC,OAAOC,MAAM,QAG1C,6BACGhC,GACC,kBAACiC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,iCACA,gDACA,mDACA,6CACA,yCACA,kDACA,uDACA,+CAGJ,+BACE,4BACE,iCACA,4BAAKpB,EAAehB,EAAQqC,mBAC5B,4BAAKrB,EAAehB,EAAQsC,sBAC5B,4BAAKtB,EAAehB,EAAQuC,gBAC5B,4BAAKvB,EAAehB,EAAQwC,YAC5B,4BAAKxB,EAAehB,EAAQyC,qBAC5B,4BAAKzB,EAAehB,EAAQ0C,0BAC5B,4BAAK1B,EAAehB,EAAQ2C,sBCnExBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c79378d8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { parseString } from 'xml2js';\nimport { Table } from 'react-bootstrap';\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [xmlJson, setXmlJson] = useState('');\n  useEffect(() => {\n    if (file) {\n      const reader = new FileReader();\n      reader.readAsText(file, 'utf-8');\n      reader.onload = () => {\n        parseString(reader.result, (err, result) => {\n          const { System: data } = result;\n          console.log(data);\n          setXmlJson(data);\n        });\n      };\n      reader.onerror = () => {\n        console.error(`Unable to read file: ${reader.error}`);\n      };\n    }\n  }, [file]);\n\n  const displayContent = data => {\n    if (typeof data === 'string' || data instanceof String) {\n      return data;\n    }\n    if (Array.isArray(data)) {\n      if (typeof data[0] === 'object' || data[0] instanceof Object) {\n        return Object.keys(data[0]).map(key => {\n          return (\n            <p>\n              <strong>{key}:&nbsp;</strong>\n              {data[0][key]}\n            </p>\n          );\n        });\n      }\n      return data[0].toString();\n    }\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <h1>CSE Detection</h1>\n      <div className=\"form-group\">\n        <label htmlFor=\"file-input\">Detection XML file</label>\n        <input\n          id=\"file-input\"\n          className=\"form-control-file\"\n          type=\"file\"\n          onChange={e => setFile(e.target.files[0])}\n        />\n      </div>\n      <div>\n        {xmlJson && (\n          <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Application_Name</th>\n                <th>Application_Version</th>\n                <th>Computer_Name</th>\n                <th>Scan_Date</th>\n                <th>Hardware_Inventory</th>\n                <th>ME_Firmware_Information</th>\n                <th>System_Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>1</td>\n                <td>{displayContent(xmlJson.Application_Name)}</td>\n                <td>{displayContent(xmlJson.Application_Version)}</td>\n                <td>{displayContent(xmlJson.Computer_Name)}</td>\n                <td>{displayContent(xmlJson.Scan_Date)}</td>\n                <td>{displayContent(xmlJson.Hardware_Inventory)}</td>\n                <td>{displayContent(xmlJson.ME_Firmware_Information)}</td>\n                <td>{displayContent(xmlJson.System_Status)}</td>\n              </tr>\n            </tbody>\n          </Table>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}