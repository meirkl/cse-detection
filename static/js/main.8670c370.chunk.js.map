{"version":3,"sources":["DropZone.js","media/trash.svg","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","props","isDragAccept","isDragReject","isDragActive","getColor","DropZone","useDropzone","accept","multiple","onDrop","getRootProps","getInputProps","className","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","d","_ref","svgRef","title","viewBox","ref","ForwardRef","forwardRef","Table","table","Trash","TrashIcon","App","useState","fileName","setFileName","xmlJson","setXmlJson","displayContent","data","String","Array","isArray","map","useCallback","file","name","reader","FileReader","readAsText","onload","parseString","result","_","System","onerror","console","error","onClick","Application_Name","Application_Version","Computer_Name","Scan_Date","Hardware_Inventory","ME_Firmware_Information","System_Status","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8670c370.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport styled from 'styled-components';\r\n\r\nconst getColor = props => {\r\n  if (props.isDragAccept) {\r\n    return '#00e676';\r\n  }\r\n  if (props.isDragReject) {\r\n    return '#ff1744';\r\n  }\r\n  if (props.isDragActive) {\r\n    return '#2196f3';\r\n  }\r\n  return '#eeeeee';\r\n};\r\n\r\nconst Container = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-width: 2px;\r\n  border-radius: 2px;\r\n  border-color: ${props => getColor(props)};\r\n  border-style: dashed;\r\n  background-color: #fafafa;\r\n  color: #bdbdbd;\r\n  outline: none;\r\n  transition: border 0.24s ease-in-out;\r\n`;\r\n\r\nconst DropZone = props => {\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject\r\n  } = useDropzone({\r\n    accept: ['application/xml', 'text/xml'],\r\n    multiple: false,\r\n    onDrop: props.onDrop\r\n  });\r\n\r\n  return (\r\n    <div className=\"container mt-3\">\r\n      <Container\r\n        {...getRootProps({ isDragActive, isDragAccept, isDragReject })}\r\n      >\r\n        <input {...getInputProps()} />\r\n        <p>Drag 'n' drop CSME Version Detection XML</p>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DropZone;\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M128 405.429C128 428.846 147.198 448 170.667 448h170.667C364.802 448 384 428.846 384 405.429V160H128v245.429zM416 96h-80l-26.785-32H202.786L176 96H96v32h320V96z\"\n});\n\nvar SvgTrash = function SvgTrash(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 512 512\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgTrash, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/trash.2141e00a.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useCallback } from 'react';\r\nimport { parseString } from 'xml2js';\r\nimport DropZone from './DropZone';\r\nimport styled from 'styled-components';\r\nimport { ReactComponent as TrashIcon } from './media/trash.svg';\r\n\r\nconst Table = styled.table`\r\n  thead {\r\n    background-color: #0071c5;\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nconst Trash = styled(TrashIcon)`\r\n  width: 24px;\r\n`;\r\n\r\nconst App = () => {\r\n  const [fileName, setFileName] = useState('');\r\n  const [xmlJson, setXmlJson] = useState('');\r\n\r\n  const displayContent = data => {\r\n    if (typeof data === 'string' || data instanceof String) {\r\n      return data;\r\n    }\r\n    if (Array.isArray(data)) {\r\n      if (typeof data[0] === 'object' || data[0] instanceof Object) {\r\n        return Object.keys(data[0]).map(key => {\r\n          return (\r\n            <p>\r\n              <strong>{key}:&nbsp;</strong>\r\n              {data[0][key]}\r\n            </p>\r\n          );\r\n        });\r\n      }\r\n      return data[0];\r\n    }\r\n  };\r\n\r\n  const onDrop = useCallback(([file]) => {\r\n    if (file) {\r\n      setFileName(file.name);\r\n      const reader = new FileReader();\r\n      reader.readAsText(file, 'utf-8');\r\n      reader.onload = () => {\r\n        parseString(reader.result, (_, result) => {\r\n          const { System: data } = result;\r\n          setXmlJson(data);\r\n        });\r\n      };\r\n      reader.onerror = () => {\r\n        console.error(`Unable to read file: ${reader.error}`);\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  const reset = () => {\r\n    setFileName('');\r\n    setXmlJson('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <h1 className=\"mt-3\">CSME Version Detection</h1>\r\n      <DropZone onDrop={onDrop} />\r\n      <div>\r\n        {xmlJson && (\r\n          <>\r\n            <div className=\"d-flex mt-3\">\r\n              <h3>{fileName}</h3>\r\n              <button\r\n                className=\"btn btn-warning align-self-end ml-2\"\r\n                onClick={reset}\r\n              >\r\n                <Trash />\r\n              </button>\r\n            </div>\r\n            <Table className=\"mt-3 table table-bordered\">\r\n              <caption>CSME Version Detection xml data</caption>\r\n              <thead>\r\n                <tr>\r\n                  <th>Application_Name</th>\r\n                  <th>Application_Version</th>\r\n                  <th>Computer_Name</th>\r\n                  <th>Scan_Date</th>\r\n                  <th>Hardware_Inventory</th>\r\n                  <th>ME_Firmware_Information</th>\r\n                  <th>System_Status</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>{displayContent(xmlJson.Application_Name)}</td>\r\n                  <td>{displayContent(xmlJson.Application_Version)}</td>\r\n                  <td>{displayContent(xmlJson.Computer_Name)}</td>\r\n                  <td>{displayContent(xmlJson.Scan_Date)}</td>\r\n                  <td>{displayContent(xmlJson.Hardware_Inventory)}</td>\r\n                  <td>{displayContent(xmlJson.ME_Firmware_Information)}</td>\r\n                  <td>{displayContent(xmlJson.System_Status)}</td>\r\n                </tr>\r\n              </tbody>\r\n            </Table>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}