{"version":3,"sources":["DropZone.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","props","isDragAccept","isDragReject","isDragActive","getColor","DropZone","useDropzone","accept","multiple","onDrop","getRootProps","getInputProps","className","App","useState","fileName","setFileName","xmlJson","setXmlJson","displayContent","data","String","Array","isArray","Object","keys","map","key","useCallback","file","name","reader","FileReader","readAsText","onload","parseString","result","_","System","onerror","console","error","onClick","Application_Name","Application_Version","Computer_Name","Scan_Date","Hardware_Inventory","ME_Firmware_Information","System_Status","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qoBAIA,IAaMA,EAAYC,IAAOC,IAAV,KAQG,SAAAC,GAAK,OArBN,SAAAA,GACf,OAAIA,EAAMC,aACD,UAELD,EAAME,aACD,UAELF,EAAMG,aACD,UAEF,UAWkBC,CAASJ,MAiCrBK,EAzBE,SAAAL,GAAU,IAAD,EAOpBM,YAAY,CACdC,OAAQ,CAAC,kBAAmB,YAC5BC,UAAU,EACVC,OAAQT,EAAMS,SARdC,EAFsB,EAEtBA,aACAC,EAHsB,EAGtBA,cACAR,EAJsB,EAItBA,aACAF,EALsB,EAKtBA,aACAC,EANsB,EAMtBA,aAOF,OACE,yBAAKU,UAAU,kBACb,kBAACf,EACKa,EAAa,CAAEP,eAAcF,eAAcC,iBAE/C,0BAAWS,KACX,0EC6COE,EA7FH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTC,EADS,KACCC,EADD,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,KAIVC,EAAiB,SAAAC,GACrB,MAAoB,kBAATA,GAAqBA,aAAgBC,OACvCD,EAELE,MAAMC,QAAQH,GACO,kBAAZA,EAAK,IAAmBA,EAAK,aAAcI,OAC7CA,OAAOC,KAAKL,EAAK,IAAIM,KAAI,SAAAC,GAC9B,OACE,2BACE,gCAASA,EAAT,SACCP,EAAK,GAAGO,OAKVP,EAAK,QAXd,GAeIX,EAASmB,uBAAY,YAAa,IAAXC,EAAU,oBACrC,GAAIA,EAAM,CACRb,EAAYa,EAAKC,MACjB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,WAAWJ,EAAM,SACxBE,EAAOG,OAAS,WACdC,sBAAYJ,EAAOK,QAAQ,SAACC,EAAGD,GAAY,IACzBhB,EAASgB,EAAjBE,OACRpB,EAAWE,OAGfW,EAAOQ,QAAU,WACfC,QAAQC,MAAR,+BAAsCV,EAAOU,YAGhD,IAOH,OACE,yBAAK7B,UAAU,mBACb,wBAAIA,UAAU,QAAd,0BACA,kBAAC,EAAD,CAAUH,OAAQA,IAClB,6BACGQ,GACC,oCACE,yBAAKL,UAAU,eACb,4BAAKG,GACL,4BACEH,UAAU,sCACV8B,QAhBA,WACZ1B,EAAY,IACZE,EAAW,MAgBC,0BAAMN,UAAU,oBAAhB,YAGJ,2BAAOA,UAAU,6BACf,oEACA,+BACE,4BACE,gDACA,mDACA,6CACA,yCACA,kDACA,uDACA,+CAGJ,+BACE,4BACE,4BAAKO,EAAeF,EAAQ0B,mBAC5B,4BAAKxB,EAAeF,EAAQ2B,sBAC5B,4BAAKzB,EAAeF,EAAQ4B,gBAC5B,4BAAK1B,EAAeF,EAAQ6B,YAC5B,4BAAK3B,EAAeF,EAAQ8B,qBAC5B,4BAAK5B,EAAeF,EAAQ+B,0BAC5B,4BAAK7B,EAAeF,EAAQgC,uBC1E1BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b29dc207.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport styled from 'styled-components';\r\n\r\nconst getColor = props => {\r\n  if (props.isDragAccept) {\r\n    return '#00e676';\r\n  }\r\n  if (props.isDragReject) {\r\n    return '#ff1744';\r\n  }\r\n  if (props.isDragActive) {\r\n    return '#2196f3';\r\n  }\r\n  return '#eeeeee';\r\n};\r\n\r\nconst Container = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-width: 2px;\r\n  border-radius: 2px;\r\n  border-color: ${props => getColor(props)};\r\n  border-style: dashed;\r\n  background-color: #fafafa;\r\n  color: #bdbdbd;\r\n  outline: none;\r\n  transition: border 0.24s ease-in-out;\r\n`;\r\n\r\nconst DropZone = props => {\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject\r\n  } = useDropzone({\r\n    accept: ['application/xml', 'text/xml'],\r\n    multiple: false,\r\n    onDrop: props.onDrop\r\n  });\r\n\r\n  return (\r\n    <div className=\"container mt-3\">\r\n      <Container\r\n        {...getRootProps({ isDragActive, isDragAccept, isDragReject })}\r\n      >\r\n        <input {...getInputProps()} />\r\n        <p>Drag 'n' drop CSME Version Detection XML</p>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DropZone;\r\n","import React, { useState, useCallback } from 'react';\r\nimport { parseString } from 'xml2js';\r\nimport DropZone from './DropZone';\r\n\r\nconst App = () => {\r\n  const [fileName, setFileName] = useState('');\r\n  const [xmlJson, setXmlJson] = useState('');\r\n\r\n  const displayContent = data => {\r\n    if (typeof data === 'string' || data instanceof String) {\r\n      return data;\r\n    }\r\n    if (Array.isArray(data)) {\r\n      if (typeof data[0] === 'object' || data[0] instanceof Object) {\r\n        return Object.keys(data[0]).map(key => {\r\n          return (\r\n            <p>\r\n              <strong>{key}:&nbsp;</strong>\r\n              {data[0][key]}\r\n            </p>\r\n          );\r\n        });\r\n      }\r\n      return data[0];\r\n    }\r\n  };\r\n\r\n  const onDrop = useCallback(([file]) => {\r\n    if (file) {\r\n      setFileName(file.name);\r\n      const reader = new FileReader();\r\n      reader.readAsText(file, 'utf-8');\r\n      reader.onload = () => {\r\n        parseString(reader.result, (_, result) => {\r\n          const { System: data } = result;\r\n          setXmlJson(data);\r\n        });\r\n      };\r\n      reader.onerror = () => {\r\n        console.error(`Unable to read file: ${reader.error}`);\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  const reset = () => {\r\n    setFileName('');\r\n    setXmlJson('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <h1 className=\"mt-3\">CSME Version Detection</h1>\r\n      <DropZone onDrop={onDrop} />\r\n      <div>\r\n        {xmlJson && (\r\n          <>\r\n            <div className=\"d-flex mt-3\">\r\n              <h3>{fileName}</h3>\r\n              <button\r\n                className=\"btn btn-warning align-self-end ml-2\"\r\n                onClick={reset}\r\n              >\r\n                <span className=\"font-weight-bold\">&#8635;</span>\r\n              </button>\r\n            </div>\r\n            <table className=\"mt-3 table table-bordered\">\r\n              <caption>CSME Version Detection xml data</caption>\r\n              <thead>\r\n                <tr>\r\n                  <th>Application_Name</th>\r\n                  <th>Application_Version</th>\r\n                  <th>Computer_Name</th>\r\n                  <th>Scan_Date</th>\r\n                  <th>Hardware_Inventory</th>\r\n                  <th>ME_Firmware_Information</th>\r\n                  <th>System_Status</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>{displayContent(xmlJson.Application_Name)}</td>\r\n                  <td>{displayContent(xmlJson.Application_Version)}</td>\r\n                  <td>{displayContent(xmlJson.Computer_Name)}</td>\r\n                  <td>{displayContent(xmlJson.Scan_Date)}</td>\r\n                  <td>{displayContent(xmlJson.Hardware_Inventory)}</td>\r\n                  <td>{displayContent(xmlJson.ME_Firmware_Information)}</td>\r\n                  <td>{displayContent(xmlJson.System_Status)}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}